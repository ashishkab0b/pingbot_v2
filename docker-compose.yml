services:

  redis:
    image: redis:latest
    container_name: "redis_db"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]

  flask-backend:
    build:
      context: ./flask_app
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./logs/flask:/app/logs
    env_file:
      - ./flask_app/.env
    environment:
      - FLASK_ENV=production
    depends_on:
      - redis

  celery-worker:
    build:
      context: ./flask_app
      dockerfile: Dockerfile
      args:
        UID: ${APP_UID}
        GID: ${APP_GID}
    command: celery -A celery_app.celery worker --loglevel=debug
    volumes:
      - ./logs/celery:/app/logs
    env_file:
      - ./flask_app/.env
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
    working_dir: /app
    depends_on:
      - redis
      - flask-backend

  celery-beat:
    build:
      context: ./flask_app
      dockerfile: Dockerfile
      args:
        UID: ${APP_UID}
        GID: ${APP_GID}
    command: celery -A celery_app.celery beat --loglevel=debug
    volumes:
      - ./logs/celery:/app/logs
    env_file:
      - ./flask_app/.env
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
    working_dir: /app
    depends_on:
      - redis
      - flask-backend

  telegram-bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    volumes:
      - ./logs/bot:/app/logs
    env_file:
      - ./bot/.env
    environment:
      - ENV_TYPE=production
    depends_on:
      - flask-backend
      - nginx

  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./logs/nginx:/var/log/nginx
      - ./nginx/certs:/etc/letsencrypt
      - ./nginx/www:/var/www/certbot  # For Certbot challenge
      # - ./nginx/certbot_nginx.conf:/etc/nginx/conf.d/default.conf  # Temporary config
      - ./nginx/logs/error.log:/var/log/nginx/error.log
      - ./nginx/logs/access.log:/var/log/nginx/access.log
    depends_on:
      - flask-backend

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes: 
      - ./nginx/certs:/etc/letsencrypt
      - ./nginx/www:/var/www/certbot 
    command: certonly --webroot \
      -w /var/www/certbot \
      --force-renewal \
      --email kabob120-certbot@yahoo.com \
      --cert-name emapingbot.com \
      -d emapingbot.com \
      --agree-tos \
      -v
    depends_on:
      - nginx


volumes:
  redis_data: